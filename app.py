# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bZ8H631FP9I6J3rxkTaCGPzBjjJdg-zP
"""

!pip install streamlit
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import classification_report, mean_squared_error

st.set_page_config(page_title="Automated Data Insight Tool", layout="wide")
st.title("📊 Upload Your CSV to Get Instant Data Insights")

# Upload file
uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.subheader("🔍 Preview of Data")
    st.write(df.head())

    st.subheader("📐 Basic Info")
    st.write("Shape:", df.shape)
    st.write("Columns:", list(df.columns))
    st.write("Data Types:")
    st.write(df.dtypes)

    st.subheader("🧼 Missing Values")
    st.write(df.isnull().sum())

    st.subheader("📊 Summary Statistics")
    st.write(df.describe())

    st.subheader("📈 Correlation Heatmap")
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm", ax=ax)
    st.pyplot(fig)

    st.subheader("🔁 Pairplot (Sampled)")
    numeric_df = df.select_dtypes(include=np.number).dropna()
    if len(numeric_df) > 100:
        numeric_df = numeric_df.sample(100, random_state=42)
    st.pyplot(sns.pairplot(numeric_df).fig)

    # ML Section
    st.subheader("🤖 Optional: Train a Quick ML Model")
    target = st.selectbox("Select Target Column (Optional)", options=[""] + list(df.columns))

    if target:
        try:
            X = df.drop(columns=[target])
            y = df[target]

            X = pd.get_dummies(X)
            y_is_classification = y.nunique() <= 10 or y.dtype == 'object'

            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            model = RandomForestClassifier() if y_is_classification else RandomForestRegressor()
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            st.success("✅ Model Trained Successfully!")

            if y_is_classification:
                st.text("Classification Report:")
                st.text(classification_report(y_test, y_pred))
            else:
                rmse = np.sqrt(mean_squared_error(y_test, y_pred))
                st.text(f"Regression RMSE: {rmse:.2f}")

            st.write("Feature Importances:")
            importance = pd.Series(model.feature_importances_, index=X.columns)
            st.bar_chart(importance.sort_values(ascending=False).head(10))

        except Exception as e:
            st.error(f"Error: {e}")